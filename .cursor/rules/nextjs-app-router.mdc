---
alwaysApply: true
---
# Next.js App Router 가이드

## App Router 구조
이 프로젝트는 Next.js 15의 App Router를 사용합니다.

### 디렉토리 구조
```
app/
├── layout.tsx          # 루트 레이아웃
├── page.tsx            # 홈페이지
├── globals.css         # 글로벌 스타일
└── [future-routes]/    # 동적 라우트
    └── page.tsx
```

## 핵심 파일 설명

### Root Layout ([app/layout.tsx](mdc:app/layout.tsx))
- 모든 페이지에 적용되는 공통 레이아웃
- 메타데이터 정의
- 폰트 설정 (Geist, Inter)
- 글로벌 스타일 적용

```tsx
export const metadata: Metadata = {
  title: "노마드 리스트 - 세계 최고의 디지털 노마드 도시",
  description: "디지털 노마드를 위한 최적의 도시를 찾아보세요. 생활비, 인터넷 속도, 안전도를 한눈에 비교하세요.",
  generator: "v0.dev",
}
```

### Homepage ([app/page.tsx](mdc:app/page.tsx))
- 메인 홈페이지 컴포넌트
- "use client" 지시어로 클라이언트 컴포넌트로 동작
- 도시 목록, 필터링, 정렬 기능 포함

## App Router 특징

### 1. 서버 컴포넌트 기본
- 기본적으로 모든 컴포넌트는 서버 컴포넌트
- 클라이언트 기능이 필요한 경우 "use client" 지시어 사용

### 2. 클라이언트 컴포넌트 사용
```tsx
"use client"

import { useState } from "react"

export default function ClientComponent() {
  const [count, setCount] = useState(0)
  // 클라이언트 상태나 이벤트 핸들러 사용
}
```

### 3. 메타데이터 API
```tsx
import type { Metadata } from "next"

export const metadata: Metadata = {
  title: "페이지 제목",
  description: "페이지 설명",
  keywords: ["키워드1", "키워드2"],
}
```

## 라우팅 패턴

### 정적 라우트
```
app/
├── about/
│   └── page.tsx        # /about 경로
├── cities/
│   └── page.tsx        # /cities 경로
└── contact/
    └── page.tsx        # /contact 경로
```

### 동적 라우트
```
app/
├── cities/
│   ├── [cityId]/
│   │   └── page.tsx    # /cities/[cityId] 경로
│   └── page.tsx        # /cities 경로
└── blog/
    ├── [category]/
    │   └── [postId]/
    │       └── page.tsx # /blog/[category]/[postId] 경로
    └── page.tsx         # /blog 경로
```

### 동적 라우트 파라미터 사용
```tsx
// app/cities/[cityId]/page.tsx
interface CityPageProps {
  params: {
    cityId: string
  }
}

export default function CityPage({ params }: CityPageProps) {
  const { cityId } = params
  
  return (
    <div>
      <h1>도시: {cityId}</h1>
    </div>
  )
}
```

## 데이터 페칭

### 서버 컴포넌트에서 데이터 페칭
```tsx
// app/cities/page.tsx
async function getCities() {
  // 서버에서 데이터 페칭
  const cities = await fetchCities()
  return cities
}

export default async function CitiesPage() {
  const cities = await getCities()
  
  return (
    <div>
      {cities.map(city => (
        <CityCard key={city.id} city={city} />
      ))}
    </div>
  )
}
```

### 클라이언트 컴포넌트에서 데이터 페칭
```tsx
"use client"

import { useEffect, useState } from "react"

export default function ClientCitiesPage() {
  const [cities, setCities] = useState([])
  const [loading, setLoading] = useState(true)
  
  useEffect(() => {
    async function fetchCities() {
      const response = await fetch('/api/cities')
      const data = await response.json()
      setCities(data)
      setLoading(false)
    }
    
    fetchCities()
  }, [])
  
  if (loading) return <div>로딩 중...</div>
  
  return (
    <div>
      {cities.map(city => (
        <CityCard key={city.id} city={city} />
      ))}
    </div>
  )
}
```

## 성능 최적화

### 1. 이미지 최적화
```tsx
import Image from "next/image"

// 최적화된 이미지 사용
<Image
  src="/city/bangkok.jpg"
  alt="방콕"
  width={400}
  height={300}
  priority // LCP 이미지에 priority 속성 사용
/>
```

### 2. 코드 스플리팅
- 페이지별 자동 코드 스플리팅
- 동적 import를 통한 지연 로딩

```tsx
import dynamic from "next/dynamic"

const HeavyComponent = dynamic(() => import("./HeavyComponent"), {
  loading: () => <div>로딩 중...</div>,
  ssr: false // 클라이언트에서만 렌더링
})
```

### 3. 메타데이터 최적화
```tsx
export const metadata: Metadata = {
  title: "페이지 제목",
  description: "페이지 설명",
  openGraph: {
    title: "Open Graph 제목",
    description: "Open Graph 설명",
  },
  twitter: {
    card: "summary_large_image",
    title: "Twitter 제목",
  },
}
```

## 에러 처리

### 에러 바운더리
```tsx
// app/error.tsx
"use client"

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div className="text-center py-12">
      <h2 className="text-xl font-bold text-gray-800 mb-4">
        문제가 발생했습니다
      </h2>
      <button
        onClick={reset}
        className="bg-blue-600 text-white px-4 py-2 rounded-lg"
      >
        다시 시도
      </button>
    </div>
  )
}
```

### 로딩 상태
```tsx
// app/loading.tsx
export default function Loading() {
  return (
    <div className="flex items-center justify-center py-12">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
    </div>
  )
}
```
